DROP TABLE IF EXISTS loans;
DROP TABLE IF EXISTS bids;
DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS items;
DROP TABLE IF EXISTS users;

CREATE TABLE users (
email VARCHAR(64) PRIMARY KEY,
username VARCHAR(64) NOT NULL,
password VARCHAR(64) NOT NULL,
mobile INT NOT NULL,
address VARCHAR(128), 
points_available INT DEFAULT 500,
credit_rating NUMERIC CHECK (credit >= 0 AND credit <= 5),
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE items (
itemid INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(64) NOT NULL,
owner VARCHAR(256) REFERENCES users(email) ON UPDATE CASCADE ON DELETE CASCADE,
description TEXT,
available VARCHAR(5) CHECK(available = 'TRUE' OR available = 'FALSE'),
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE posts (
postid int AUTO_INCREMENT PRIMARY KEY,
item int REFERENCES items(itemid) ON DELETE CASCADE,
start TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
end TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, 
title VARCHAR(64) NOT NULL,
location VARCHAR(128) NOT NULL,
description TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
CHECK (start < end)
);

CREATE TABLE bids (
bidid INT AUTO_INCREMENT PRIMARY KEY,
bidder INT REFERENCES users(email) ON UPDATE CASCADE ON DELETE CASCADE,
post INT REFERENCES posts(postid) ON DELETE CASCADE,
points INT NOT NULL,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
status CHAR(7) CHECK (status = 'SUCCESS' OR status = 'FAILURE')
);

CREATE TABLE loans (
loanid INT AUTO_INCREMENT PRIMARY KEY,
bid INT REFERENCES bids(bidid) ON DELETE CASCADE,
post INT REFERENCES posts(postid) ON DELETE CASCADE,
start TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
end TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
comments TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
status VARCHAR(8) CHECK (status = 'ONLOAN' or status = 'RETURNED' or status = 'EXPIRED'),
CHECK (start < end)
);
